<?php

/**
 * @file
 * Written by Henri MEDOT <henri.medot[AT]absyx[DOT]fr>
 * http://www.absyx.fr
 */

/**
 * Implements hook_entity_info_alter().().
 */
function field_readonly_entity_info_alter(&$entity_info) {
  // Add the field_readonly view mode.
  foreach (array_keys($entity_info) as $entity_type) {
    $entity_info[$entity_type]['view modes']['field_readonly'] = array(
      'label' => t('Field Readonly'),
      'custom settings' => FALSE,
    );
  }
}

/**
 * Implements hook_field_attach_form().().
 */
function field_readonly_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // Ignore Ajax requests.
  if (!empty($form_state['triggering_element']['#ajax']['callback'])) {
    return;
  }

  // Display non-accessible fields as read-only items.
  $entity_id = entity_id($entity_type, $entity);
  if ($entity_id && entity_access('view', $entity_type, $entity) || !$entity_id && field_readonly_view_new_entity_support($entity_type, $entity) && entity_access('view', $entity_type, $entity)) {
    if (!$entity_id) {
      $entity = clone $entity;
      $info = entity_get_info($entity_type);
      $key = isset($info['entity keys']['name']) ? $info['entity keys']['name'] : $info['entity keys']['id'];
      $entity_id = $entity->$key = FALSE;
    }
    $build = entity_view($entity_type, array($entity), 'field_readonly');
    if (!$build) {
      return;
    }
    $build = reset($build);
    $build = $build[$entity_id];

    // Iterate on each field instance.
    list(, , $bundle) = entity_extract_ids($entity_type, $entity);
    $instances = field_info_instances($entity_type, $bundle);
    $extra_fields = field_info_extra_fields($entity_type, $bundle, 'form');
    foreach (array_merge(array_keys($instances), array_keys($extra_fields)) as $field_name) {
      if (isset($form[$field_name])) {
        $element = $form[$field_name];
        if (isset($element['#access']) && !$element['#access'] && isset($build[$field_name])) {
          $new_field_name = '_field_readonly__' . $field_name;
          $weight = isset($extra_fields[$field_name]) && !isset($element['#weight']) ? $extra_fields[$field_name]['weight'] : $element['#weight'];
          $form[$new_field_name] = array_merge($build[$field_name], array('#weight' => $weight));
          $attach_css = TRUE;

          // Add support for the Field Group module.
          if (isset($form['#group_children'][$field_name])) {
            $form['#group_children'][$new_field_name] = $form['#group_children'][$field_name];
            $form[$new_field_name]['#type'] = '_dummy_type';
          }
        }
      }
    }

    if (!empty($attach_css)) {
      $form['#attached']['css'][] = backdrop_get_path('module', 'field_readonly') . '/field_readonly.css';
    }
  }
}

/**
 * Checks whether a new entity supports being viewed.
 */
function field_readonly_view_new_entity_support($entity_type, $entity) {
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  foreach (module_implements('field_readonly_view_new_entity_support') as $module) {
    $function = $module . '_field_readonly_view_new_entity_support';
    if ($function($entity_type, $bundle)) {
      return TRUE;
    }
  }
  return FALSE;
}
